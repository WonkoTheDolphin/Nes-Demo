MEMORY {
    # The linker needs to know where to find, and how much space to allocate
    # for system RAM, the zero page, and Sprite OAM.
    # The stack is hardwired into the 6502 architecture, and automatically
    # reserved at start = $0100 size = $100.
    # As this memory begins empty, no output to a file is needed.
    ZP:  start = $00,   size = $0100, type = rw, file = "";
    OAM: start = $0200, size = $0100, type = rw, file = "";
    RAM: start = $0300, size = $0400, type = rw, file = "";
    NMT: start = $0700, size = $0100, type = rw, file = "";

    #The memory allocated to iNES header, program ROM, and graphics data, does
    # not begin empty, and so does need to be a part of the output file.
    HDR: start = $0000, size = $0010, type = ro, file = %O, fill = yes, fillval = $00;
    PRG: start = $8000, size = $8000, type = ro, file = %O, fill = yes, fillval = $00;
    CHR: start = $0000, size = $2000, type = ro, file = %O, fill = yes, fillval = $00;
}

SEGMENTS {
    ZEROPAGE: load = ZP,  type = zp;
    OAM:      load = OAM, type = bss;
    BSS:      load = RAM, type = bss;
    NMT:      load = NMT, type = bss;
    HEADER:   load = HDR, type = ro;
    CODE:     load = PRG, type = ro,  start = $8000;
    RODATA:   load = PRG, type = ro;
    VECTORS:  load = PRG, type = ro,  start = $FFFA;
    TILES:    load = CHR, type = ro;
}
